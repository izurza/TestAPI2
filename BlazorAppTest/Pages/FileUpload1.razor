@page "/file-upload-1"
@using System
@using System.IO
@using System.Net.Http.Headers;
@using System.Text.Json;
@using TestAPI2.Models.DTOs;
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using TestApi.Shared.DTOs;
@inject IHttpClientFactory ClientFactory;
@inject ILogger<FileUpload1> Logger
@inject IWebHostEnvironment Environment

<h3>Upload Files</h3>


<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>


    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        <ul>
                            <li>
                                File: @file.Name
                                <br>
                                @if (FileUpload(uploadResults, file.Name, Logger, out var result))
                                {
                                    <span>
                                        Stored File Name: @result.StoredFileName
                                    </span>
                                }
                                else
                                {
                                    <span>
                                        There was an error uploading the file
                                        (Error: @result.ErrorCode)
                                    </span>
                                }
                            </li>
                        </ul>
                    </li>
                }
            </ul>
        </div>
    </div>
    

@code {
    private List<File> files = new();
    private List<UploadResult> uploadResults = new(); 
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 2;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    files.Add(new() { Name = file.Name });
                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                } 
                catch (Exception ex)
                {
                    Logger.LogInformation("{FileName} not uploaded *Err: 6): {Message}",
                    file.Name, ex.Message);
                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });

                }
            }
        }
        if (upload)
        {
            var client = ClientFactory.CreateClient();
            var response = await client.PostAsync("https://localhost/7242/Filesave", content);

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                    };
                using var responseStream = await response.Content.ReadAsStreamAsync();

                var newUploadResults = await JsonSerializer.DeserializeAsync<IList<UploadResult>>(responseStream, options);

                if (newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                }
            }

        }
        shouldRender = true;
    }
    private static bool FileUpload(IList<UploadResult> uploadResults, string? fileName, ILogger<FileUpload1> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)",fileName);
            result.ErrorCode = 5;
        }
        return result.Uploaded;
    }
    private class File
    {
        public string? Name { get; set; }
    }
}